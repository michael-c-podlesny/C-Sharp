CLR (common language runtime)
JIT (just in time compilation)

A class is a container that has Data and Methods (also called functions)

Namespace - is a container for related classes

Assembly - is a container for related namespaces



Class Library

to delare a variable

type identifier;
ex. int myFirstInt;
ex. int myFirstInt = 1;

constants

const float Pi = 3.14159f;

variables are case sensitive

variable names can't start with a number and they can't have white space


Camel Case: firstName
Pascal Case: FirstName
Hungarian Notation: strFirstName

local variables use camel case

constants use Pascal Case

don't use Hungarian in C#

variable types:

byte      number from 1 to 255
short     which is an Int16
int       which is an Int32
long      which is an Int 64
float     single            add suffix f to end of number
double    double      default number datatype
decimal                     add suffix m to end of number
char
bool
string



number = number + 1  equals number++ which also equals number+=1

***** checking for overflow error *****
checked
{
  //code block
}


CTRL+SHIFT+B === compiles the code
CTRL+F5 === runs the code



SAMPLE CODE
===========
namespace Variables
{
    class Program
    {
        static void Main(string[] args)
        {
            byte number = 2;
            int count = 10;
            float totalPrice = 20.95f;
            char character = 'A';
            string myFirstString = "This is my first string";
            bool isWorking = true;

            Console.WriteLine(number);
            Console.WriteLine(totalPrice);
            Console.WriteLine(count);
        }
    }
}

CODE SNIPPETS
=============
type in "cw" then press tab and Console.WriteLine() will be typed out


Press CTRL + clicking the mouse over variables and datatypes will take you to their detailed information




STRINGS
=======
Console.WriteLine("{0} {1}", byte.MinValue,byte.MaxValue);

{0} and {1} referes to values to be passed in, in this case MinVal and MaxVal



CASTING
=======
float f = 1.0f;

int i = (int)f; //converts f to an integer so it can assign it to the variable i

string s = "1";
int i = Convert.ToInt32(s);


CATCHING ERRORS
===============
            try
            {
                string number = "1234";
                int i = Convert.ToInt32(number);
            }
            catch (Exception)
            {
                Console.WriteLine("Error in code!");
            }
